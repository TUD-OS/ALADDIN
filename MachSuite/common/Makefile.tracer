#### NOTES ####
# Define ACCEL_NAME, TRACER_HOME, ALADDIN_HOME, WORKLOAD, SRCS before including
# this.
###############
CURRENT_DIR := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))
COMMON_DIR := $(CURRENT_DIR)

.PHONY: trace dma-trace clean run autotrace check-env

EXEC = $(ACCEL_NAME)

TRACER = $(TRACER_HOME)/full-trace/full_trace.so
LOGGER = $(TRACER_HOME)/profile-func/trace_logger.llvm
MODE = LLVM_TRACE

ALL_SRCS = $(SRCS) $(COMMON_DIR)/harness.c
CPPFLAGS = -I$(ALADDIN_HOME) -I$(COMMON_DIR) -D$(MODE)

ifneq ($(DMA_MODE),)
	ALL_SRCS += $(ALADDIN_HOME)/gem5/dma_interface.c
	CPPFLAGS += -DDMA_MODE -I$(ALADDIN_HOME)/gem5
endif

LLVM_OBJS = $(patsubst %.c, %-opt.llvm, $(ALL_SRCS))
trace: $(EXEC)-instrumented
dma-trace:
	$(MAKE) -C . DMA_MODE=1 trace

# To have traces generated automatically, set the environment variable
# TRACE_OUTPUT_DIR to a directory where you want the traces to eventually go,
# then build this target. The trace will get split into separate traces per
# function, and all files ending in _trace will get copied there.
autotrace: trace check-env
	./$(EXEC)-instrumented input.data check.data

check-env:
ifeq ($(TRACE_OUTPUT_DIR),)
	$(error TRACE_OUTPUT_DIR is not set!)
endif

#########################################################
#        INSTRUMENTATION AND TRACE FILE GENERATION      #
#########################################################

full.llvm: $(LLVM_OBJS)
	llvm-link -o $@ $^ $(LOGGER)

full.s: full.llvm
	llc -O0 -disable-fp-elim -filetype=asm -o $@ $<

$(EXEC)-instrumented: full.s
	$(CXX) -O0 -fno-inline -o $@ $< -lm -lz

%-opt.llvm: %.c
	clang -g -O1 -S -fno-slp-vectorize -fno-vectorize -fno-unroll-loops \
        -fno-inline -fno-builtin -emit-llvm \
				$(CPPFLAGS) \
        $(BMARK_SPECIFIC_CFLAGS) \
        -o $*.llvm $<
	opt -S -load=$(TRACER) -fulltrace $*.llvm -o $@

clean-trace:
	rm -rf $(COMMON_TEMP_DIR)
	rm -f *.llvm
	rm -f *.o
	rm -f dynamic_trace.gz
	rm -f static_trace
	rm -f *-instrumented
	rm -f full.s
